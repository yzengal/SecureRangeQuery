syntax = "proto3";
import "google/protobuf/empty.proto";

package ICDE18;

service FedQueryService {

    // A client-to-server streaming RPC.
    //
    // Obtains the records that are within a Circle range.
    // 
    // Results are streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of record.
    rpc AnswerCircleRangeQuery(Circle) returns (stream Record) {}

    // A client-to-server streaming RPC.
    //
    // Obtains the records that are within a Rectangle range.
    // 
    // Results are streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of record.
    rpc AnswerRectangleRangeQuery(Rectangle) returns (stream Record) {}

    // A silo-to-server RPC
    //
    // Obtains the counts of grid GetGridIndex
    //
    rpc GetGridIndex(google.protobuf.Empty) returns (GridIndexCounts) {};

    // A server-to-silo streaming RPC
    //
    // Obtains the Ids of grids that intersects with the query range
    //
    rpc SendFilterGridIndex(IntVector) returns (google.protobuf.Empty) {};

    // A silo-to-server streaming RPC.
    //
    // Obtains the records that are within a Rectangle range.
    // 
    // Results are streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of record.
    rpc GetFilterGridRecord(google.protobuf.Empty) returns (stream Record) {}


    // A silo-to-server streaming RPC.
    //
    // Obtains the encrypted records that are within a Rectangle range.
    // 
    // Results are streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of record.
    rpc GetFilterGridEncryptRecord(google.protobuf.Empty) returns (stream EncryptRecord) {}


    // A silo-to-server streaming RPC.
    //
    // Obtains the encrypted records that are within a Rectangle range.
    // 
    // Results are streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of record.
    rpc GetEncryptKeys(google.protobuf.Empty) returns (ByteVector) {}


    // A client-to-server streaming RPC.
    //
    // Obtains the #(records) that are within a Circle range.
    // 
    // Results are streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of record.
    // rpc AnswerCircleRangeCount(Circle) returns (RecordSummary) {}


    // A client-to-server streaming RPC.
    //
    // Obtains the #(records) that are within a Rectangle range.
    // 
    // Results are streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of record.
    // rpc AnswerRectangleRangeCount(Rectangle) returns (RecordSummary) {}
};

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
    float x = 1;
    float y = 2;
}


// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
    // One corner of the rectangle.
    Point lo = 1;

    // The other corner of the rectangle.
    Point hi = 2;
}

// A latitude-longitude Circle, 
// represented as the center and radius
message Circle {
    // the center of the Circle.
    Point center = 1;

    // the radius of the Circle.
    float rad = 2;
}

// the Circle query range
message CircleQueryRange {
    // the id of this query
    int32 id = 1;

    // the Circle range of this query
    Circle range = 2;
}

// the Rectangle query range
message RectangleQueryRange {
    // the id of this query
    int32 id = 1;

    // the Rectangle range of this query
    Rectangle range = 2;
}


// A record names something at a given point.
//
// If a record could not be named, the name is empty.
message Record {
    // The id of the record.
    int32 id = 1;

    // The location of this record.
    Point p = 2;

    // The measure attribute of this record.
    // string name = 3;
}


// A encrypted record names something at a given point.
//
// If a record could not be named, the name is empty.
message EncryptRecord {
    // The id of this record
   int32 id = 1;

    // The encrypted data of a record.
    bytes data = 2;
}

// The vector of encryption/decrption keys
//
// If a record could not be named, the name is empty.
message ByteVector {
    // The size of the counts.
    int32 size = 1;

    // The vector of the counts
    bytes values = 2;
}

// The count of each grid
//
// If a record could not be named, the name is empty.
message IntVector {
    // The size of the counts.
    int32 size = 1;

    // The vector of the counts
    repeated int32 values = 2;
}

message FloatVector {
    // The size of the counts.
    int32 size = 1;

    // The vector of the counts
    repeated float values = 2;
}

message GridIndexCounts {
    // The number of grid in each side
    int32 k = 1;

    // The vector of mins
    FloatVector mins = 2; 
    
    // The vector of maxs
    FloatVector maxs = 3;

    // The vector of widths 
    FloatVector widths = 4;

    // The count of each grid
    IntVector counts = 5;
}

// A RecordSummary is received in response to a federated range counting query.
//
// It contains the number of individual points in the query range.
message RecordSummary {
  // The number of points received.
  int32 point_count = 1;
}